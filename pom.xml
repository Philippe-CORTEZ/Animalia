<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>fr.animalia</groupId>
  <artifactId>Animalia</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>Animalia</name>
  <url>https://www.animalia.fr</url>


  <!-- Propriétés -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <maven.compiler.release>11</maven.compiler.release>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>

    <maven.plugin.compiler.version>3.8.1</maven.plugin.compiler.version>

    <jersey.version>3.0.1</jersey.version>
    <jackson.version>2.13.3</jackson.version>
    <jjwt.version>0.11.5</jjwt.version>

    <main.class>fr.animalia.clients.Lanceur</main.class>
  </properties>


  <!-- Declaration de certaines dépendances pour pom parent -->
  <dependencyManagement>
    <dependencies>
      <!-- Jakarta RESTful Web Services (JAXRS) https://jakarta.ee/specifications/restful-ws/3.0/ -->
      <dependency>
        <groupId>org.glassfish.jersey</groupId>
        <artifactId>jersey-bom</artifactId>
        <version>${jersey.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>com.sun.activation</groupId>
        <artifactId>jakarta.activation</artifactId>
        <version>2.0.1</version>
      </dependency>

      <dependency>
        <groupId>com.sun.istack</groupId>
        <artifactId>istack-commons-runtime</artifactId>
        <version>4.0.1</version>
      </dependency>

      <dependency>
        <groupId>jakarta.activation</groupId>
        <artifactId>jakarta.activation-api</artifactId>
        <version>2.0.1</version>
      </dependency>
    </dependencies>
  </dependencyManagement>


  <!-- Dépendances utilisés -->
  <dependencies>
    <!-- LOMBOK pour boilerplate -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.24</version>
      <scope>provided</scope>
    </dependency>

    <!-- JUnit 5 pour les tests unitaires -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.8.2</version>
      <scope>test</scope>
    </dependency>

    <!-- PostgreSQL driver -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>42.3.9</version>
    </dependency>

    <!-- Implantation pour JPA (Eclipslink) -->
    <dependency>
      <groupId>org.eclipse.persistence</groupId>
      <artifactId>eclipselink</artifactId>
      <version>3.1.0-M1</version>
    </dependency>

    <!-- SLF4J liaison simple avec le logger du JDK -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>2.0.0-alpha6</version>
    </dependency>

    <!-- JavaFX base -->
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>18.0.1</version>
    </dependency>

    <!-- JavaFX base -->
    <dependency>
      <groupId>org.controlsfx</groupId>
      <artifactId>controlsfx</artifactId>
      <version>11.1.1</version>
    </dependency>

    <!-- JavaFX FXML -->
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>18.0.1</version>
    </dependency>


    <!-- Grizzly et JERSEY pour le serveur JAX-RS-->
    <dependency>
      <groupId>org.glassfish.jersey.containers</groupId>
      <artifactId>jersey-container-grizzly2-http</artifactId>
    </dependency>

    <dependency>
      <groupId>org.glassfish.jersey.inject</groupId>
      <artifactId>jersey-hk2</artifactId>
    </dependency>

    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-client</artifactId>
    </dependency>

    <dependency>
      <groupId>org.glassfish.grizzly</groupId>
      <artifactId>grizzly-npn-bootstrap</artifactId>
      <version>2.0.0</version>
    </dependency>

    <dependency>
      <groupId>org.glassfish.grizzly</groupId>
      <artifactId>grizzly-http2</artifactId>
      <version>3.0.1</version>
    </dependency>

    <!-- Jackson : JAVA <==> JSON -->
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-json-jackson</artifactId>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-eclipse-collections</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <!-- JJWT pour la gestion des token -->
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-api</artifactId>
      <version>${jjwt.version}</version>
    </dependency>

    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-impl</artifactId>
      <scope>runtime</scope>
      <version>${jjwt.version}</version>
    </dependency>

    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-jackson</artifactId>
      <version>${jjwt.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>



  <!-- Plugins maven -->
  <build>
    <plugins>

      <!--  Compile sources -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven.plugin.compiler.version}</version>
        <configuration>
          <release>${maven.compiler.release}</release>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
        </configuration>
      </plugin>

      <!-- Tests unitaires -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M4</version>
      </plugin>

      <!-- mvn clean -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.1.0</version>
      </plugin>

      <!-- mvn install -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <version>3.0.0-M1</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.1.0</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.9.1</version>
      </plugin>


      <!-- Pour créer le FATJar (jar avec les dépendances) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.3</version>
        <configuration>
          <createDependencyReducedPom>true</createDependencyReducedPom>
          <minimizeJar>false</minimizeJar>
          <shadedArtifactAttached>true</shadedArtifactAttached>
          <shadedClassifierName>withdependencies</shadedClassifierName>

          <transformers>
            <!-- fusion services -->
            <transformer
                    implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />

            <!-- point d'entré par défaut -->
            <transformer
                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
              <manifestEntries>
                <Main-Class>${main.class}</Main-Class>
                <X-Compile-Source-JDK>${java.version}</X-Compile-Source-JDK>
                <X-Compile-Target-JDK>${java.version}</X-Compile-Target-JDK>
                <Multi-Release>true</Multi-Release>
              </manifestEntries>
            </transformer>

            <!-- garde fichier de config par defaut -->
            <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
              <resource>config.properties</resource>
              <resource>log4j.properties</resource>
            </transformer>
          </transformers>

          <!-- suppression signatures du uberjar -->
          <filters>
            <filter>
              <artifact>*:*</artifact>
              <excludes>
                <exclude>META-INF/*.SF</exclude>
                <exclude>META-INF/*.DSA</exclude>
                <exclude>META-INF/*.RSA</exclude>
              </excludes>
            </filter>
          </filters>

        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Génération du certificat auto signé (SSL) -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>keytool-maven-plugin</artifactId>
        <version>1.5</version>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <id>generateKeyPair</id>
            <goals>
              <goal>generateKeyPair</goal>
            </goals>
            <configuration>
              <skipIfExist>true</skipIfExist>
            </configuration>
          </execution>
          <execution>
            <phase>generate-resources</phase>
            <id>generateCertificateRequest</id>
            <goals>
              <goal>generateCertificateRequest</goal>
            </goals>
            <configuration>
              <file>src/main/resources/ssl/test.csr</file>
            </configuration>
          </execution>
          <execution>
            <phase>generate-resources</phase>
            <id>generateCertificate</id>
            <goals>
              <goal>generateCertificate</goal>
            </goals>
            <configuration>
              <infile>src/main/resources/ssl/test.csr</infile>
              <outfile>src/main/resources/ssl/test.crt</outfile>
              <rfc>true</rfc>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <keystore>src/main/resources/ssl/cert.jks</keystore>
          <storepass>storepass</storepass>
          <keypass>storepass</keypass>
          <alias>localhost</alias>
          <validity>100</validity>
          <sigalg>SHA256withRSA</sigalg>
          <keyalg>RSA</keyalg>
          <dname>cn=localhost</dname>
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>